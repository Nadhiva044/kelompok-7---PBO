import pygame
import random
import math

pygame.init()

# Dimensi layar
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Star Catcher")

# Warna
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
YELLOW = (255, 255, 0)
BLUE = (0, 128, 255)
PINK = (255, 105, 180)
RED = (255, 0, 0)

# Pengaturan frame
clock = pygame.time.Clock()
FPS = 60

# Konstanta game
PLAYER_RADIUS = 20
STAR_RADIUS = 15
FLOWER_SIZE = 40
SPEED = 5
INVINCIBILITY_TIME = 60

# Gambar latar belakang
background_image = pygame.image.load("saat game.png")
background_image = pygame.transform.scale(background_image, (WIDTH, HEIGHT))

opening_screen_background = pygame.image.load("background game.png")
opening_screen_background = pygame.transform.scale(opening_screen_background, (WIDTH, HEIGHT))

game_over_background = pygame.image.load("background game.png")
game_over_background = pygame.transform.scale(game_over_background, (WIDTH, HEIGHT))

# Kelas Induk untuk GameObject
class GameObject:
    def _init_(self, x, y, color):
        self.x = x
        self.y = y
        self.color = color

    def draw(self, screen):
        raise NotImplementedError("Subclasses must implement this method")

# Kelas Player mewarisi GameObject
class Player(GameObject):
    def _init_(self):
        super()._init_(WIDTH // 2, HEIGHT // 2, BLUE)
        self.radius = PLAYER_RADIUS
        self.score = 0
        self.lives = 3
        self.invincibility_time = 0
        self.flash_time = 0

    def move(self, keys):
        if self.invincibility_time > 0:
            self.invincibility_time -= 1

        if keys[pygame.K_UP] and self.y - self.radius > 0:
            self.y -= SPEED
        if keys[pygame.K_DOWN] and self.y + self.radius < HEIGHT:
            self.y += SPEED
        if keys[pygame.K_LEFT] and self.x - self.radius > 0:
            self.x -= SPEED
        if keys[pygame.K_RIGHT] and self.x + self.radius < WIDTH:
            self.x += SPEED

    def draw(self, screen):
        if self.invincibility_time > 0:
            self.flash_time += 1
            color = (255, 0, 255) if self.flash_time % 10 < 5 else self.color
        else:
            color = self.color
        pygame.draw.circle(screen, color, (self.x, self.y), self.radius)

# Kelas Star mewarisi GameObject
class Star(GameObject):
    def _init_(self):
        x = random.randint(STAR_RADIUS, WIDTH - STAR_RADIUS)
        y = random.randint(STAR_RADIUS, HEIGHT - STAR_RADIUS)
        super()._init_(x, y, YELLOW)
        self.radius = STAR_RADIUS

def draw(self, screen):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius)

# Kelas Flower mewarisi GameObject
class Flower(GameObject):
    def _init_(self):
        x = random.randint(FLOWER_SIZE, WIDTH - FLOWER_SIZE)
        y = random.randint(FLOWER_SIZE, HEIGHT - FLOWER_SIZE)
        super()._init_(x, y, PINK)
        self.size = FLOWER_SIZE
        self.speed_x = random.choice([-3, -2, 2, 3])
        self.speed_y = random.choice([-3, -2, 2, 3])

    def move(self):
        self.x += self.speed_x
        self.y += self.speed_y

        if self.x - self.size // 2 < 0 or self.x + self.size // 2 > WIDTH:
            self.speed_x *= -1
        if self.y - self.size // 2 < 0 or self.y + self.size // 2 > HEIGHT:
            self.speed_y *= -1

    def draw(self, screen):
        points = []
        for i in range(8):
            angle = i * (math.pi / 4)
            length = self.size if i % 2 == 0 else self.size // 2
            x = self.x + length * math.cos(angle)
            y = self.y + length * math.sin(angle)
            points.append((x, y))
        pygame.draw.polygon(screen, self.color, points)

# Kelas Game
class Game:
    def _init_(self):
        self.running = True
        self.on_opening_screen = True
        self.on_click_to_start_screen = False
        self.game_started = False
        self.game_over = False
        self.player = Player()
        self.stars = [Star() for _ in range(5)]
        self.flowers = [Flower() for _ in range(3)]

    def start_game(self):
        self.on_opening_screen = False
        self.on_click_to_start_screen = False
        self.game_started = True
        self.game_over = False
        self.player = Player()
        self.stars = [Star() for _ in range(5)]
        self.flowers = [Flower() for _ in range(3)]

    def opening_screen(self):
        screen.blit(opening_screen_background, (0, 0))

        title_font = pygame.font.SysFont("Georgia", 80)
        title_text = title_font.render("STAR CATCHER", True, WHITE)

        instruction_font = pygame.font.SysFont("Georgia", 40)
        instruction_text = instruction_font.render("WELCOME TO THE GAME", True, WHITE)

        title_rect = title_text.get_rect(center=(WIDTH // 2, HEIGHT // 3))
        instruction_rect = instruction_text.get_rect(center=(WIDTH // 2, HEIGHT // 3 + 100))

        screen.blit(title_text, title_rect)
        screen.blit(instruction_text, instruction_rect)

    def click_to_start_screen(self):
        screen.blit(opening_screen_background, (0, 0))

        click_font = pygame.font.SysFont("Georgia", 50)
        click_text = click_font.render("CLICK TO START!", True, WHITE)

        click_rect = click_text.get_rect(center=(WIDTH // 2, HEIGHT // 2))

        screen.blit(click_text, click_rect)

    def game_over_screen(self):
        screen.blit(game_over_background, (0, 0))

        game_over_font = pygame.font.SysFont("Georgia", 70)
        game_over_text = game_over_font.render("GAME OVER!", True, RED)

        final_score_font = pygame.font.SysFont("Georgia", 50)
        final_score_text = final_score_font.render(f"SCORE : {self.player.score}", True, RED)

        try_again_font = pygame.font.SysFont("Georgia", 40)
        try_again_text = try_again_font.render("CLICK TO START", True, WHITE)
